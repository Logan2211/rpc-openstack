---
# Copyright 2016, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

filebeat_apt_gpg_keys:
  # NOTE(sigmavirus24): Yes, it really is this key:
  # https://www.elastic.co/guide/en/beats/libbeat/current/setup-repositories.html
  - { url: "https://packages.elasticsearch.org/GPG-KEY-elasticsearch", state: present }

filebeat_apt_repo_url: "http://packages.elastic.co/beats/apt"

filebeat_apt_repos:
  - { repo: "deb {{ filebeat_apt_repo_url }} stable main", state: present }

filebeat_apt_packages:
  - "filebeat"

filebeat_logstash_port: "{{ logstash_beats_port |default(5044) }}"

# NOTE(sigmavirus24): Once we upgrade to Ansible 2.1, we can use the extract
# filter
#"{{ groups['logstash_all'] | map('extract', hostvars, ['container_address']) | list }}"
filebeat_logstash_hosts: "{% for host in groups['logstash_all'] %}{{ hostvars[host]['ansible_ssh_host'] }}:{{ filebeat_logstash_port }}{% if not loop.last %},{% endif %}{% endfor %}"

# NOTE(sigmavirus24): Explanation of the regular expression:
# - The Date is formatted by oslo.log as YYYY-MM-DD
# - The Time is formatted by oslo.log as HH:MM:SS.Microseconds
# - The Python Module tends to look like "cinder.api.scheduler"
# - The Id is the group of request Ids, e.g., [req-<UUID4> ...]
# We don't want lines like these to be captures as "multiline"
# (hence the negate: true line) so we match the lines that we want
# to be single log line items and negate them. We want to exclude
# "Traceback" here because:
# 1. It's not useful - it has the same timestamp as the actual
#    traceback.
# 2. If there is a multiline log before it, you would get one large
#    log item instead of two discrete items.
# See also https://play.golang.org/p/Y6qBej0IB2
#
#                              Date        Time       PID     Level   Python Module   Id
multiline_openstack_pattern: '^[0-9-]{10} +[0-9:\.]+ +[0-9]+ +[A-Z]+ +[A-Za-z0-9\._]+ \[|Traceback'

filebeat_logging_paths:
  - host_group: 'cinder_all'
    file_patterns:
    - 'cinder*.log'
    document_type: openstack
    tags:
    - openstack
    - oslofmt
    - cinder
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - host_group: 'glance_all'
    file_patterns:
    - 'glance*.log'
    document_type: openstack
    tags:
    - openstack
    - oslofmt
    - glance
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - host_group: 'heat_all'
    file_patterns:
    - 'heat*.log'
    document_type: openstack
    tags:
    - openstack
    - oslofmt
    - heat
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - host_group: 'horizon_all'
    file_patterns:
    - 'horizon*.log'
    document_type: openstack
    tags:
    - openstack
    - oslofmt
    - horizon
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - host_group: 'keystone_all'
    file_patterns:
    - '/var/log/keystone/keystone.log'
    document_type: openstack
    tags:
    - openstack
    - oslofmt
    - keystone
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - host_group: 'keystone_all'
    file_patterns:
    - 'ssl_access.log'
    - 'keystone-apache-error.log'
    tags:
    - openstack
    - apache
    - apache-access
    - keystone
  - host_group: 'neutron_all'
    file_patterns:
    - 'neutron*.log'
    document_type: openstack
    tags:
    - openstack
    - oslofmt
    - neutron
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  - host_group: 'nova_all'
    file_patterns:
    - 'nova*.log'
    document_type: openstack
    tags:
    - openstack
    - oslofmt
    - nova
    multiline:
      pattern: "{{ multiline_openstack_pattern }}"
      negate: 'true'
      match: after
  # NOTE(sigmavirus24): Swift does not use oslo.log, so we cannot rely on our
  # oslo-based pattern
  - host_group: 'swift_all'
    file_patterns:
    - 'account*.log'
    document_type: openstack
    tags:
    - openstack
    - swift
    - swift-account
  - host_group: 'swift_all'
    file_patterns:
    - 'container*.log'
    document_type: openstack
    tags:
    - openstack
    - swift
    - swift-container
  - host_group: 'swift_all'
    file_patterns:
    - 'object*.log'
    document_type: openstack
    tags:
    - openstack
    - swift
    - swift-object
  - host_group: 'swift_all'
    file_patterns:
    - 'proxy*.log'
    document_type: openstack
    tags:
    - openstack
    - swift
    - swift-proxy
  # Start of non-OpenStack services whose logs we'd like to ship
  # NOTE(sigmavirus24): I couldn't find specific log names in the apparmor
  # directory.
  # - paths:
  #   - '/var/log/apparmor/*.log'
  #   tags:
  #   - apparmor
  #   - infrastructure
  - host_group: 'all'
    file_patterns:
    - 'auditd.log'
    - 'audispd.log'
    tags:
    - audit
  # NOTE(sigmavirus24): We don't seem to ship fsck logs with rsyslog
  # - paths:
  # - - '/var/log/fsck/*'
  # - tags:
  # - - fsck
  - host_group: 'haproxy_all'
    file_patterns:
    - 'haproxy*.log'
    tags:
    - haproxy
    - infrastructure
  # NOTE(sigmavirus24): rsyslog doesn't ship the libvirt logs
  # - paths:
  # - - '/var/log/libvirt/*.log'
  # - - '/var/log/libvirt/*/*.log'
  # - tags:
  # - - libvirt
  # - - nova
  - host_group: 'hosts'
    file_patterns:
    - 'lxc*.log'
    tags:
    - lxc
    - infrastructure
  - host_group: 'all'
    file_patterns:
    - 'cgmanager.log'
    - 'cinder-volume.log'
    - 'heat-engine.log'
    - 'neutron-l3-agent.log'
    - 'neutron-linuxbridge-agent.log'
    - 'neutron-server.log'
    - 'nova-api-metadata.log'
    - 'nova-compute.log'
    - 'nova-scheduler.log'
    - 'nova-spicehtml5proxy.log'
    - 'systemd-logind.log'
    tags:
    - upstart
    - infrastructure
  - host_group: 'galera_all'
    file_patterns:
    - 'galera_server_error.log'
    tags:
    - galera
    - mysql
    - infrastructure
    multiline:
      # See https://play.golang.org/p/1r4iM0xwjQ
      pattern: '^([^0-9W]|$)'
      negate: 'false'
      match: after
  - host_group: 'rabbitmq_all'
    file_patterns:
    - 'rabbitmq*.log'
    multiline:
      # See https://play.golang.org/p/2SwhbSZxue
      pattern: '^='
      negate: 'true'
      match: after
    tags:
    - rabbitmq
    - infrastructure
  - host_group: 'elasticsearch_all'
    file_patterns:
    - 'openstack*.log'
    multiline:
      # See https://play.golang.org/p/Fo3bb7Mcgr
      pattern: '^[^\[]'
      negate: 'false'
      match: after
    tags:
    - elasticsearch
    - infrastructure
    - logging
  - host_group: 'logstash_all'
    file_patterns:
    - 'logstash.log'
    tags:
    - logstash
    - infrastructure
    - logging
  - host_group: 'ceph_all'
    file_patterns:
    - 'ceph-mon.*.log'
    multiline:
      pattern: '^[a-z_]* '
      negate: 'false'
      match: after
    tags:
    - ceph-mon
    - ceph
    - infrastructure
  - host_group: 'ceph_all'
    file_patterns:
    - 'ceph-osd.*.log'
    tags:
    - ceph-osd
    - ceph
    - infrastructure
  - host_group: 'repo_all'
    file_patterns
    - '*access.log'
    tags:
    - repo
    - nginx
    - nginx-access
    - infrastructure
  - host_group: 'repo_all'
    file_patterns:
    - '*error.log'
    tags:
    - repo
    - nginx
    - nginx-error
    - infrastructure


filebeat_configuration_files:
  - { src: "filebeat.yml.j2", dest: "/etc/filebeat/filebeat.yml" }
